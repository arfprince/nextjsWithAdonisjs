history
sudo lsof -i :3001
cat /var/log/nginx/error.log
sudo systemctl reload nginx
sudo lsof -i :3333
sudo kill 28669
sudo kill 28304
sudo kill 3942
node -v
sudo lsof -i :3000
sudo nginx -t
node ace serve --watch
cd hello-world/
code .
cd ..
ls
npm init adonis-ts-app@latest hello-world

node -v

cd myFirstDeployment/
cd githubAction/
cd /home/ezy/mine/
npm init adonis-app@latest hello-world

npm cache clean --force

rmdir backend
cd backend/
mkdir  backend
rm -rf backend/
sudo systemctl start nginx
sudo systemctl stop nginx
sudo kill nginx
npm i express
npm init
cd ,,
cd app
cat package.json
npx create-next-app@latest
rmdir frontend
rm frontend/
mkdir frontend backend
mkdir myFirstDeployment
mkdir githubAction
cd actions-runner/
nautilus .
./config.sh --url https://github.com/arfprince/hello-world --token AU26YGSDGE3FCIPXIUDKQB3HJWX4C
tar xzf ./actions-runner-linux-x64-2.321.0.tar.gz
echo "ba46ba7ce3a4d7236b16fbe44419fb453bc08f866b24f04d549ec89f1722a29e  actions-runner-linux-x64-2.321.0.tar.gz" | shasum -a 256 -c
curl -o actions-runner-linux-x64-2.321.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.321.0/actions-runner-linux-x64-2.321.0.tar.gz
mkdir actions-runner && cd actions-runner
du -sh .
./config.sh remove --token AU26YGSDGE3FCIPXIUDKQB3HJWX4C
./config.sh remove --token YOUR_TOKEN

rm actions-runner-*.tar.gz
rm -rf *
tar xzf ./actions-runner-osx-x64-2.321.0.tar.gz
echo "b2c91416b3e4d579ae69fc2c381fc50dbda13f1b3fcc283187e2c75d1b173072  actions-runner-osx-x64-2.321.0.tar.gz" | shasum -a 256 -c
curl -o actions-runner-osx-x64-2.321.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.321.0/actions-runner-osx-x64-2.321.0.tar.gz
git push
git commit -m "nginx production"
git add .
docker compose -f docker-compose.prod.yml up
cd /home/ezy/mine/docker/task-1/
lsmod | grep kvm

sudo modprobe kvm-intel

sudo apt update
sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils

egrep -c '(vmx|svm)' /proc/cpuinfo

ls -al /dev/kvm
lsmod | grep kvm
lsmod | grep kvm
kvm_amd               167936  0
ccp                   126976  1 kvm_amd
kvm                  1089536  1 kvm_amd
irqbypass              16384  1 kvm
kvm-ok
modprobe kvm_intel
modprobe kvm
git commit -m "connected mongodb"
git status
n pm run dev
npm i mongoose express dotenv
cd myYouTube/
cd /home/ezy/mine/backend/
sudo systemctl status nginx

sudo systemctl stop nginx

sudo systemctl reload nginx

sudo rm -rf /home/ezy/mine/nginx

ls -l | grep blee
ls -ld | grep blee
ls -ld | grep ble
ls -ld | grep me
ls -l | grep me
chmod 775 nginx
chmod -r 775 nginx
ls -l | grep nginx
ls -l | grep backend
ls -ld | grep backend
ls -ld
ls -ld /home/ezy /home/ezy/mine /home/ezy/mine/nginx

sudo chmod u+rwx /home/ezy

sudo chmod u+w /home/ezy

sudo chmod o+x /home/ezy

sudo chmod +x /home/ezy
sudo chmod +x /home/ezy/mine

sudo tail -f /var/log/nginx/error.log

ls -ld /home/ezy/mine/nginx/
ls -l /home/ezy/mine/nginx/me.html

sudo chown -R www-data:www-data /home/ezy/mine/nginx/
sudo chmod -R 755 /home/ezy/mine/nginx/

ls -l /home/ezy/mine/nginx/me.html

ls -ld /home/ezy/mine/nginx

sudo nginx -t

sudo chmod -R 755 /home/ezy/mine/nginx
sudo chown -R www-data:www-data /home/ezy/mine/nginx
ls -l | nginx
ls -l
ls /home/ezy/mine/nginx/me.html

sudo ln -s /etc/nginx/sites-available/me /etc/nginx/sites-enabled/
sudo rm /etc/nginx/sites-enabled/me
sudo ln -s /etc/nginx/sites-available/me /etc/nginx/sites-enabled/

sudo ln -s /etc/nginx/sites-available/me /etc/nginx/sites-enabled/

touch me.html
cd /home/ezy/mine/nginx/
groups ezy

sudo usermod -aG root ezy

ls -ld /etc/nginx

sudo usermod -aG nginx ezy
groups ezy
group ezy
sudo code /etc/nginx
sudo code .
cd nginx
pwd
cat default
cd sites-enabled
ca sites-enabled
ca sites-enabled/
sudo systemctl status apache2
sudo systemctl stop apache2
cd sites-available/
ls -a
cd conf.d/
cat nginx.conf.bak
cat nginx.conf
cd /etc/nginx/
nano /etc/nginx/nginx.config
sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak

nano nginx.conf
which nginx
sudo remove nginx
sudo systemctl staus nginx
sudo -i
nginx -s reload
sudo systemctl start nginx.service
sudo nginx
sudo lsof -i :80
sudo  pkill -9 nginx
sudo kill -9 nginx
nginx
cp -r /etc/nginx /home/ezy/mine/
cp /etc/nginx /home/ezy/mine/
cp /etc/nginx /home/ezy/mine/nginx
cp /etc/nginx /home/ezy/mine/ngimx
code ,
cd nginx/
cd etc
cd /
sudo apt install nginx
cd /usr/sbin/

cd /usr/sbin/nginx

cat /usr/sbin/nginx

git commit -m "bug"
docker compose -f docker-compose.prod.yml down
sudo apt remove virtualbox
sudo apt uninstal virtualbox
sudo apt uninstall virtualbox
which virtualbox
grep virtual
cd code .
code
cd task-1/
cd docker
touch .prettierignore
touch .prettierrc
npm i prettier
mkdir controllers db middlewares models routes utils
cd src
git commit -m "setup"
npm i -D nodemon
touch index.js app.js constants.js
touch .gitkeep
cd temp
mkdir temp
cd public/
mkdir public
mkdir public/temp
mkdir src
touch .env.sample
.env.sample
touch .env
touch .gitignore
git remote add origin git@github.com:arfprince/myYouTube.git
git checkout -b main
git branch
mv myYOTube myYouTube
mkdir myYOTube
cd /home/ezy/mine/backend
npm run build
htop
npm i axios
npm run start
npm install
npm creat vite@latest .
cd fullStackBegin/
mv furllStackB fullStackBegin
mkdir furllStackB
npm i dotenv
npm install express
cd myFirstApp/
mkdir myFirstApp
mkdir backend
cd /home/ezy/mine
npm -v
node
sudo apt install nodejs
vboxmanage --version
docker-machine rm worker2
docker-machine ls
eval $(docker-machine env worker2)
docker-machine create --driver virtualbox worker2
podman --version

sudo apt autoremove -y
sudo apt autoclean

rm -rf ~/.config/containers

sudo rm -rf /var/lib/containers

sudo apt remove --purge -y podman-compose

sudo apt remove --purge -y podman

podman
sudo apt install podman

docker-machine rm worker3
docker swarm init
docker node ls
ifconfig
ifconf
docker-machine create --driver virtualbox worker3
sudo modprobe -r kvm_intel
sudo modprobe -r kvm

docker swarm leave -f
sudo reboot

sudo update-initramfs -u

sudo nano /etc/modprobe.d/blacklist-kvm.conf

docker info
VBoxManage list hostonlyifs
ping 10.0.2.15
sudo docker-machine create --driver virtualbox manager
mokutil --list-enrolled
mokutil --sb-state
sudo ip link set dev vboxnet0 up
virtualbox --version

sudo /sbin/vboxconfig

sudo apt update
sudo apt install virtualbox-dkms linux-headers-$(uname -r) build-essential

docker-machine create --driver virtualbox manager
docker-machine --version
docker-machine -V
sudo chmod +x /usr/local/bin/docker-machine
sudo curl -L https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-machine
sudo chmod +x /usr/local/bin/docker-machine

sudo curl -L https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-$(uname -s)-$(uname -m) > /usr/local/bin/docker-machine

exit
sudo modprobe vboxdrv
sudo depmod -a
set modules vboxdrv vboxnetflt vboxnetadp
set kernel_version (uname -r)

for module in $modules
    set module_path "/lib/modules/$kernel_version/updates/dkms/$module.ko.zst"
    
    if test -f "$module_path"
        echo "Processing $module"
        sudo zstd -d "$module_path"
        sudo /usr/src/linux-headers-"$kernel_version"/scripts/sign-file sha256 MOK.priv MOK.der "/lib/modules/$kernel_version/updates/dkms/$module.ko"
        sudo zstd "/lib/modules/$kernel_version/updates/dkms/$module.ko"
    else
        echo "Module $module not found at $module_path"
    end
end

ls /lib/modules/(uname -r)/updates/dkms/
set modules vboxdrv vboxnetflt vboxnetadp vboxpci
set kernel_version (uname -r)

for module in $modules
    set module_path "/lib/modules/$kernel_version/updates/dkms/$module.ko.zst"
    
    if test -f "$module_path"
        echo "Processing $module"
        sudo zstd -d "$module_path"
        sudo /usr/src/linux-headers-"$kernel_version"/scripts/sign-file sha256 MOK.priv MOK.der "/lib/modules/$kernel_version/updates/dkms/$module.ko"
        sudo zstd "/lib/modules/$kernel_version/updates/dkms/$module.ko"
    else
        echo "Module $module not found"
    end
end
set modules "vboxdrv vboxnetflt vboxnetadp vboxpci"

for module in $modules
    sudo zstd -d "/lib/modules/"(uname -r)"/updates/dkms/"$module".ko.zst"
    sudo /usr/src/linux-headers-"(uname -r)"/scripts/sign-file sha256 MOK.priv MOK.der "/lib/modules/"(uname -r)"/updates/dkms/"$module".ko"
    sudo zstd "/lib/modules/"(uname -r)"/updates/dkms/"$module".ko"
end
modules="vboxdrv vboxnetflt vboxnetadp vboxpci"
sudo zstd /lib/modules/6.8.0-49-generic/updates/dkms/vboxdrv.ko
sudo /usr/src/linux-headers-$(uname -r)/scripts/sign-file sha256 MOK.priv MOK.der /lib/modules/6.8.0-49-generic/updates/dkms/vboxdrv.ko
sudo zstd -d /lib/modules/6.8.0-49-generic/updates/dkms/vboxdrv.ko.zst
find /lib/modules/$(uname -r) -name "vboxdrv.ko*"
sudo /usr/src/linux-headers-$(uname -r)/scripts/sign-file sha256 MOK.priv MOK.der /lib/modules/$(uname -r)/misc/vboxdrv.ko
sudo mokutil --import MOK.der
sudo openssl req -new -x509 -newkey rsa:2048 -keyout MOK.priv -outform DER -out MOK.der -nodes -days 36500 -subj "/CN=Your$(whoami)/"

openssl req -new -x509 -newkey rsa:2048 -keyout MOK.priv -outform DER -out MOK.der -nodes -days 36500 -subj "/CN=Your Name/"
sudo apt-get install linux-headers-$(uname -r)
sudo apt-get update
sudo apt-get --reinstall install virtualbox-dkms
docker swarm join --token SWMTKN-1-00fitpyciv7u1qvhfa2t41mmfklr5i5wu31mx1k5u4c3qpk9yy-2ezyy4ksi716p24nmzxj7w3xo 192.168.65.9:2377
docker swarm leave --force
dmesg | grep vbox

sudo modprobe vboxdrv

sudo mokutil --sb-state

sudo mokutil --list-enrolled

sudo dkms remove virtualbox/7.0.16 --all
sudo dkms add -m virtualbox -v 7.0.16
sudo dkms build -m virtualbox -v 7.0.16
sudo dkms install -m virtualbox -v 7.0.16

sudo dmesg | grep vbox
sudo mokutil --import /var/lib/shim-signed/mok/vbox.der

sudo openssl x509 -outform DER -in /var/lib/shim-signed/mok/vbox.crt -out /var/lib/shim-signed/mok/vbox.der

sudo mokutil --import /var/lib/shim-signed/mok/vbox.crt

sudo mkdir -p /var/lib/shim-signed/mok
sudo openssl req -new -x509 -newkey rsa:2048 -keyout /var/lib/shim-signed/mok/vbox.key -out /var/lib/shim-signed/mok/vbox.crt -days 36500 -nodes -subj "/CN=VirtualBox Kernel Module Signing/"

sudo openssl x509 -outform der -in /var/lib/shim-signed/mok/vbox.crt -out /var/lib/shim-signed/mok/vbox.der

mokutil --sb-state

sudo apt install --reinstall virtualbox-dkms
sudo dpkg-reconfigure virtualbox-dkms

rm docker-compose2.yml  docker-compose.yml
docker rm docker-compose2.yml  docker-compose.yml
docker rm *.yml
*.yml
docker rm .
docker-compose -f docker-compose2.yml down
docker-compose -f docker-compose2.yml up -d
docker swarm init --advertise-addr 192.168.0.232
docker dwarm leave --force
sudo lsof -i :4789
docker-compose -f docker-compose2.yml up
sudo lsof -i :2377
cd /home/ezy/mine/docker/docker-swarm/
sudo kill 17543
sudo kill qemu-syst
sudo kill -9 qemu-syst
docker network ls
vim docker-compose2.yml
touch docker-compose2.yml
docker-compose up -d
vim docker-compose.yml
touch docker-compose.yml
docker-compose -f docker-compose.manager.yml down

docker-compose -f docker-compose.manager.yml up -d

docker swarm leave --force

docker swarm leave

docker-compose -f docker-compose.worker.yml down

docker info | grep Swarm

docker-compose -f docker-compose.worker.yml up -d

docker network rm vftyunuaxiyb
docker ps -a
docker ps
docker network rm e353007ac99e
docker network rm cfda6330d7d8
docker networl ls
docker network prune
docker network purne
docdocker info
docker network create --driver overlay swarm-net

docker swarm init --advertise-addr 192.168.1.2
docker swarm info
docker exec -it 6d9222d4011a docker swarm init --advertise-addr 192.168.1.2

docker-compose -f docker-compose.worker.yml up -d
docker-compose -f docker-compose.worker.yml up /

docker swarm status
docker swaem status
docker swarm join-token worker

docker exec -it da9d0b82ca11 docker swarm init --advertise-addr 192.168.1.2

vim docker-compose.worker.yml
touch docker-compose.worker.yml
vim docker-compose.manager.yml
touch docker-compose.manager.yml
docker swarm join --token SWMTKN-1-1g1qbnhyza16bdvi82yq5xudyouyozismuaqhkui28zxl5cqw7-c6q22ixlypa98learww6lizj6 192.168.65.9:2377
docker swarm leave
sudo ss -tuln | grep 2377

telnet 192.168.0.243 2377

ping 192.168.0.243

docker swarm join --token SWMTKN-1-2izyh0vzjiitc1zmmihkqt7k2rbbay2adty5n5hsyqcplptgqv-dwr1pk7eb2tblsid5wg8dwn3t 192.168.0.243:2377
docker swarm init --advertise-addr 192.168.0.232

sudo ufw status
sudo iptables -A INPUT -p tcp --dport 7946 -j ACCEPT
sudo iptables -A INPUT -p udp --dport 7946 -j ACCEPT
sudo iptables -A INPUT -p udp --dport 4789 -j ACCEPT
sudo ufw allow 7946/tcp
sudo ufw allow 7946/udp
sudo ufw allow 4789/udp
sudo ufw staus
sudo ufw enable
vim daemon.json
cat daemon.json
nano daemon.json
nano d
telnet 192.168.0.232 2377

sudo journalctl -u docker | grep "swarm"

sudo docker info

sudo journalctl -u docker | grep -i -e "error" -e "bind" -e "failed"

sudo journalctl -u docker | grep "error"
sudo journalctl -u docker | grep -i "bind"
sudo journalctl -u docker | grep -i "failed"
sudo journalctl -u docker | grep -i "listen"

sudo journalctl -u docker | grep "error"

sudo nano /etc/docker/daemon.json

touch daemon.json
ls  -a
ls | -a
echo touch "{
  "hosts": ["fd://", "tcp://0.0.0.0:2377"]
}
" > daemon.json
cd /etc/docker/
cat /etc/docker/daemon.json
/etc/docker/daemon.json
curl http://192.168.0.232:2377

ping 192.168.0.243
sudo ufw disable
docker info

sudo netstat -tuln | grep 2377

sudo journalctl -u docker

sudo iptables -L -n | grep 2377

sudo iptables -L -n

sudo systemctl status docker

sudo netstat -tuln
sudo netstat -tuln | grep 2377
sudo ufw allow 2377/tcp
sudo systemctl status docker
sudo systemctl start docker-desktop

sudo systemctl start docker
sudo systemctl enable docker
sudo systemctl start docker-desktop
sudo apt-get update
sudo apt-get install docker-ce

sudo systemctl restart docker-desktop

sudo systemctl status docker.service
docker systemctl status docker
docker swarm join --token SWMTKN-1-65ktmrpy0a74nydr4ur0ex9dkd566ze0p8zwovip0c9r5coapa-6jdteuoxozf7du0w82w0mtagp 192.168.0.243:2377
git push --force
git commit -m "database is a dynamic thing. it should not be in git. so"
docker inspect cc3fccbd11f0
git log --oneline
clear

git show 5e9185dcaeb4b379e727647735e950f398931b82

git commit -m "in yml file only nginx port declared and dynamically ssl certificate generate"
docker compose -f docker-compose.yml up
docker-compose exec nginx sh
ls /etc/nginx/certs

git commit -m "added mkcert but not worked"
wget https://arfprince.dev/api/todos
wget https://arfprince.dev
ping https://arfprince.dev/api/todos
npm install https fs

wget https://arfprince.dev:4000/api/todos
wget https://arfprince.dev/
cat /etc/hosts
curl https://arfprince.dev/api/todos

curl -I https://arfprince.dev
curl -I https://arfprince.dev/api/todos

sudo nginx -t
sudo systemctl reload nginx

mkcert arfprince.dev "*.arfprince.dev" localhost 127.0.0.1

cd /home/ezy/mine/docker/task-1/certs/
mkcert -install

mkcert -version

sudo apt install wget -y
wget -q https://github.com/FiloSottile/mkcert/releases/latest/download/mkcert-v1.4.4-linux-amd64
sudo mv mkcert-v1.4.4-linux-amd64 /usr/local/bin/mkcert
sudo chmod +x /usr/local/bin/mkcert

sudo apt install libnss3-tools

sudo cp ~/certs/arfprince.crt /usr/local/share/ca-certificates/arfprince.crt
sudo update-ca-certificates

ping arfprince.dev
nslookup arfprince.dev
dig arfprince.dev
git commit -m "bug fixed"
git add -A
wget https://arfprince.dev/

sudo update-ca-certificates

sudo cp arfprince.dev.crt /usr/local/share/ca-certificates/

cd certs/
wget --no-check-certificate https://arfprince.dev/

ls -l arfprince.dev.key
ls -l arfprince.dev.crt

ls -l ~/certs/arfprince.dev.key
ls -l ~/certs/arfprince.dev.crt

openssl x509 -in arfprince.dev.crt -text -noout

openssl x509 -req -in arfprince.dev.csr -signkey arfprince.dev.key -out arfprince.dev.crt -days 365

openssl req -new -key arfprince.dev.key -out arfprince.dev.csr

openssl genpkey -algorithm RSA -out arfprince.dev.key

sudo systemctl stats nginx

openssl req -new -key ~/certs/arfprince.dev.key -out arfprince.dev.csr

openssl req -new -key ~/certs/arfprince.dev.key -out ~/certs/arfprince.dev.csr

openssl genpkey -algorithm RSA -out ~/certs/arfprince.dev.key

openssl genpkey -algorithm RSA -out arfprince.dev.key -aes256

openssl x509 -noout -text -in arfprince.csr
openssl x509 -noout -text -in arfprince.crs

openssl x509 -noout -text -in arfprince.crt

openssl req -new -key arfprince.key -out arfprince.csr

openssl genpkey -algorithm RSA -out arfprince.key

openssl genpkey -algorithm RSA -out arfprince.key -aes256

sudo apt update
sudo apt install openssl

openssl genpkey -algorithm RSA -out mydomain.key -aes256

wgethttps://arfprince.dev/
sudo rm -rf /var/lib/kubelet

sudo rm -rf /etc/kubernetes

sudo apt-get purge -y kubeadm kubectl

dpkg -l | grep kube

sudo systemctl list-units --type=service | grep kube

sudo apt-get clean

sudo snap remove kubelet

sudo systemctl disable snap.kubelet.daemon.service

sudo systemctl stop snap.kubelet.daemon.service

sudo rm -rf /etc/apt/keyrings/k8s.asc

ls /etc/apt/keyrings/

cat /etc/apt/sources.list.d/kubernetes.list

ls /etc/kubernetes

sudo apt-get purge -y kubelet kubeadm kubectl

sudo apt-get autoremove -y

sudo rm -f /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/keyrings/k8s.asc > /dev/null

echo "deb [signed-by=/etc/apt/keyrings/k8s.asc] https://apt.kubernetes.io/kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list > /dev/null

sudo rm /etc/apt/sources.list.d/kubernetes.list

echo "deb [signed-by=/etc/apt/keyrings/k8s.asc] https://apt.kubernetes.io/kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/keyrings/k8s.asc

sudo nano /etc/apt/sources.list.d/kubernetes.list

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

echo "deb https://apt.kubernetes.io/kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get install -y kubeadm kubectl

sudo apt-get install -y kubelet

sudo apt-get update && sudo apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb http://apt.kubernetes.io/kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo systemctl enable kubelet --now

sudo systemctl stop kubelet

sudo kubeadm init

sudo kill -9 35033
sudo lsof -i :10250

sudo kill -9 34732
kubeadm init
sudo systemctl restart containerd

sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml

sudo mkdir -p /etc/containerd
sudo containerd config default > /etc/containerd/config.toml

sudo apt-get install -y containerd
sudo systemctl enable containerd --now

sudo kubeadm init --pod-network-cidr=192.168.0.0/16

sudo swapoff -a
sudo nano /etc/fstab

sudo apt-get install -y conntrack

kubectl version --client
kubeadm version

sudo snap install kubectl --classic
sudo snap install kubeadm --classic
sudo snap install kubelet --classic

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-add-repository "deb https://apt.kubernetes.io/ kubernetes-xenial main"
sudo apt update
sudo apt install -y kubelet kubeadm kubectl

sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

aws --version

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

cd /home/ezy/mine/docker/
docker compose top
docker compose ps
docker compose -f docker-compose.yml down
docker top
docker rm dcf79567ce9a
docker stop dcf79567ce9a
curl -X POST http://arfprince\.dev:4000/api/todos   -H "Content-Type: application/json"   -d '{"task": "kaj kore nah -__- ", "completed": false}'
{"_id":"6742f89f1167b49c5d67f55c","task":"kaj kore nah","completed":true}
sudo kill -9 93265
sudo lsof -i :27017

sudo systemctl status mongod.service
sudo systemctl start mongod.service
sudo lsof -i :80

sudo kill -9 91079
sudo kill -9 89071
Gracefully stopping... (press Ctrl+C again to force)
Error response from daemon: Ports are not available: exposing port TCP 0.0.0.0:27017 -> 0.0.0.0:0: listen tcp4 0.0.0.0:27017: bind: address already in use
docker ps -
curl -X POST http://arfprince\.dev:4000/api/todos   -H "Content-Type: application/json"   -d '{"task": "kaj kore nah", "completed": false}'
{"_id":"6742f89f1167b49c5d67f55c","task":"kaj kore nah","completed":true}
curl -X POST http://arfprince\.dev:4000/api/todos   -H "Content-Type: application/json"   -d '{"task": "Test Task-3", "completed": false}'
{"_id":"6742f89f1167b49c5d67f55c","task":"kaj kore nah","completed":true}
curl -X POST http://arfprince\.dev:4000/api/todos   -H "Content-Type: application/json"   -d '{"task": "Test Task-3", "completed": false}'
{"_id":"6742f89f1167b49c5d67f55c","task":"Test Task-3","completed":false}
curl -X POST http://arfprince.dev:4000/api/todos
curl -X POST https://arfprince.dev:4000/api/todos
curl -X POST https://arfprince.dev/api/todos
curl -k https://arfprince.dev/api/todos
curl -k https://arfprince.dev/
sudo pkill -f nginx

docker compose -f docker-compose.prod.yml start
sudo certbot --nginx -d arfprince.dev

sudo certbot --nginx -d yourdomain.com

sudo apt install certbot python3-certbot-nginx

openssl s_client -connect arfprince.dev:443 -CAfile /path/to/arfprince.dev.crt

ping arfprince.dev

openssl rsa -noout -modulus -in /path/to/arfprince.dev.key | openssl md5
openssl x509 -noout -modulus -in /path/to/arfprince.dev.crt | openssl md5
chrome://settings/security
google-chrome --ignore-certificate-errors

cd .
git commit -m "by nginx"
docker -A
docker ps -a

docker logs ec5480440f3a
docker-compose logs nginx

docker-compose restart nginx

sudo lsof -i -P -n | grep nginx

pqwd
cd /etc/hosts
/etc/hosts
docker ps

sudo systemctl start nginx

systemctl reload nginx

nginx -t

openssl req -newkey rsa:2048 -nodes -keyout arfprince.dev.key -x509 -out arfprince.dev.crt

mkdir certs
cd certs

git commit -m "production mode by docker"
docker images
sudo systemctl stop mongod.service
npm start
cd
docker compose down
docker compose up
git commit -m "all by docker"
git push -u origin main
git commit -m "all on local"
git remote add origin git@github.com:arfprince/TodoWithDocker.git
git init
cd mine
cd..
git push origin main --force
git push

git commit -m "Integrate frontend folder into root repository"
cd ..
git add frontend
cd frontend
rm -rf .git

cp -r frontend frontend_backup

clee
git commit -m "all running at local"
npm run
npm install mongodb
docker networr ls
docker netwrk ls
sudo systemctl status mongod
sudo systemctl stop mongod
sudo systemctl start mongod
sudo systemctl ststus mongod
sudo systemctl start mongodb
sudo systemctl start mongodb.service
curl http://localhost:4000/api/todos

docker image
npm install cors

npm install mongoose

cleear
git commit -m "scaleton"
git branch -M main
docker exec -it a635ce4e1c81 mongosh
docker exec -it a635ce4e1c81 /mongosh
docker rmi c165af1a407e
docker rm a4c06b35ab35
dicker ps
docker rmi 1dd50a4eefcd cd543f77303a
docker compose up -d
docker run --name my-backend-dev-c -p 4000:4000 my-backend-dev-i
docker build -f Dockerfile.dev -t my-backend-dev-i .
docker rmi a41f62f3f69b
docker rm 2ef52355d93d
docker stop 2ef52355d93d
docker rm 5b9effdf62ff
docker run --name my-backend-dev-c -p 4000:3000  my-backend-dev-i
docker run --name my-backend-dev-c -p 4000:4000  my-backend-dev-i
docker rmi 44f4448d31bc
docker rm 9d9444b91675
docker stop 9d9444b91675
docker rm 13b516fa9ed5
docker stop 13b516fa9ed5
npm dev
docker start 13b516fa9ed5
docker --debug
npm install dotenv --save
node app.js
node index.js
docker run --name my-frontend-dev-c -p 3000:3000  my-frontend-dev-i
docker rm 03de84c2bda0
docker stop 03de84c2bda0
docker start 03de84c2bda0
docker exec -it 03de84c2bda0 /bin/sh
docker build -f Dockerfile.dev -t my-frontend-dev-i .
docker rmi 35053fd41a2f
docker rm 2813f37f9dd7
docker exec -it 2813f37f9dd7 /bin/sh
docker run --name my-frontend-dev-c my-frontend-dev-i
docker rm 451b2d6dec94
docker --name my-frontend-dev-c my-frontend-dev-i
systemctl --user start docker-desktop
sudo apt-get update
sudo apt-get install ./docker-desktop-amd64.deb
cd /home/ezy/Downloads/
docker rmi ddcd42b77585
docker rm 838360deee34
docker rmi my-frontend-dev
docker stop 838360deee34
docker start 838360deee34
docker logs 838360deee34
docker ps m-a
docker run --name my-frontend-dev my-frontend-dev
docker build -f Dockerfile.dev -t my-frontend-dev .
docker image prune -a

docker rmi ddcd42b77585

docker rm 40869627d7fb

docker rmi 40869627d7fb
docker rmi my-project-dev
docker start -a 40869627d7fb

docker run 40869627d7fb
docker start my-project-dev
docker run my-project-dev
ld
rm -rf frontend/
cd frontend
mv taks-1 task-1
cd task-1
cd t
mkdir taks-1
cd todo-app/
cd /home/ezy/mine/docker
docker-compose down
docker-compose up --build -d
mv arfprince.dev+*.pem ssl/cert.pem ssl/key.pem
cd /home/ezy/mine/docker/todo-app
mkcert arfprince.dev localhost 127.0.0.1 ::1
rm cert.pem key.pem
head -n 5 cert.pem
head -n 5 key.pem
ls -la
cd ssl/
openssl rsa -in key.pem -check
openssl x509 -in cert.pem -text -noout

sudo chmod 644 cert.pem
sudo chown $(whoami):$(whoami) cert.pem
docker-compose up --build -d
docker-compose down
sudo mv /arfprince.dev+3.pem ssl/cert.pem
sudo mv /arfprince.dev+3-key.pem ssl/key.pem
rm arfprince.dev+3.pem
sudo mv arfprince.dev+3.pem cert.pem
sudo mv arfprince.dev+3-key.pem key.pem
sudo mv ~/arfprince.dev+3.pem ssl/cert.pem
sudo mv ~/arfprince.dev+3-key.pem ssl/key.pem
ls ssl/
mkdir -p ssl
mkcert arfprince.dev localhost 127.0.0.1 ::1
sudo mkcert arfprince.dev localhost 127.0.0.1 ::1
mkcert -install
sudo apt install mkcert

sudo apt-get install libnss3-tools
wget https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64
sudo mv mkcert-v1.4.3-linux-amd64 /usr/local/bin/mkcert
sudo chmod +x /usr/local/bin/mkcert
sudo /etc/hosts
docker exec -it b9eaaa422982 /bin/sh
sudo systemctl status mongo
sudo systemctl status mongosh
docker exec -it 057d2b745b85 mongosh
docker exec -it 057d2b745b85 /bin/sh
docker logs 225b0d4b766d
docker logs 057d2b745b85
docker logs b9eaaa422982
docker-compose up --build -d

docker-compose down

openssl x509 -in cert.pem -text -noout
openssl x509 -in ssl/cert.pem -text -noout
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
docker logs 1db8e1750ebf
docker build -f frontend/Dockerfile -t todo-app-frontend .

docker logs ecef599b6772
docker logs 461238989ee7
docker logs ae9f84230b8f
openssl rsa -in key.pem -out key_unencrypted.pem

openssl x509 -noout -modulus -in cert.pem | openssl md5
openssl rsa -noout -modulus -in key.pem | openssl md5

docker logs 9a72b5dbfd2e
docker logs b29d9f4cea74
docker-compose ps
sudo nano /etc/hosts

mkdir ssl
openssl req -x509 -newkey rsa:4096 -keyout ssl/key.pem -out ssl/cert.pem -days 365

docker down
docker exec -it 759336f5c6fa mongosh

docker exec -it 759336f5c6fa mongod

docker exec -it 759336f5c6fa mongo

docker exec -it --user root 759336f5c6fa /bin/sh
docker exec -it --user root 759336f5c6fa
docker-compose down
docker-compose up --build -d

docker logs 6022451e54d9
docker logs todo_mongodb

docker logs 35c4867f65e0
docker logs todo_backend

docker logs todo_frontend

docker inspect db698e345b34
docker logs 3dd4fc32a8f3
docker-compose up -d

docker logs 28a1eeeec200
docker logs todo-app-backend
docker logs todo_backend
docker compose doen
DOCKER PS
docker-compose down
docker-compose up -d

docker-compose restart todo-app-mysql-1

docker exec -it todo-app-mysql-1 bash

docker exec -it --user root todo-app-backend-1 bash

mysql -h mysql -u todouser -p

sudo apt update && apt install -y mysql-client

apt update && apt install -y mysql-client

docker compose dow
docker exec -it todo-app-backend-1 sh

curl mysql:3306

docker logs todo-app-mysql-1
docker logs todo-app-backend-1
docker logs backend
chmod +x server.js
chmod +x backend/server.js
sudo systemctl stop apache2

sudo lsof -iTCP:80 -sTCP:LISTEN

sudo lsof -iTCP:3306 -sTCP:LISTEN

sudo systemctl stop mysql

mkdir nginx
touch nginx/default.conf
mkdir nginx
touch frontend/nginx/default.conf
mkdir -p frontend/nginx
touch frontend/nginx/default.conf
npm init -y
npm install express mysql2 cors
echo "# frontend/Dockerfile
FROM nginx:alpine

COPY index.html /usr/share/nginx/html/
COPY styles.css /usr/share/nginx/html/
COPY script.js /usr/share/nginx/html/

EXPOSE 80" > Dockerfile
vim script.js
touch script.js
vim style.css
touch style.css
echo "<!-- frontend/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Todo App</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Todo List</h1>
        <form id="todoForm">
            <input type="text" id="todoTitle" placeholder="Todo Title" required>
            <textarea id="todoDescription" placeholder="Description"></textarea>
            <button type="submit">Add Todo</button>
        </form>
        <ul id="todoList"></ul>
    </div>
    <script src="script.js"></script>
</body>
</html>" > index.html
echo "{
  "name": "todo-backend",
  "version": "1.0.0",
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.17.1",
    "mysql2": "^2.3.3"
  }
}" > package.json
echo "# backend/Dockerfile
FROM node:16

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 3000

CMD ["node", "server.js"]" > Dockerfile
vim server.js
touch server.js
echo "CREATE DATABASE IF NOT EXISTS tododb;
USE tododb;

CREATE TABLE todos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    status ENUM('pending', 'completed') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO todos (title, description) VALUES 
('First Todo', 'This is my first todo item'),
('Learn Docker', 'Complete Docker compose tutorial');" > init.sql
cd database/
docker-compose up --build
mkdir backend frontend database
mkdir todo-app
cd todo-app
rm -rf todo
rm -rf tdd
rmdir tdd todo
cd backend
npm start

cd td
cd /home/ezy/mine/gitL/
cd getting-started-todo-app
git clone https://github.com/docker/getting-started-todo-app.git
cd tdd
echo "certs/" >> .gitignore
chmod 600 certs/private.key
chmod 644 certs/certificate.crt
echo docker-compose.yml
curl http://localhost:3001/api/todos

docker logs backend

docker-compose build frontend
docker build . --no-cache --progress=plain

cd /home/ezy/mine/docker/td/
echo "services:
  mongodb:
    image: mongo:latest
    container_name: todo_mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

volumes:
  mongodb_data:" > docker-compose.yml
npm start

sudo rm /etc/apt/sources.list.d/docker.list
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install ca-certificates curl gnupg
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg
sudo apt-get update
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg
sudo apt-get install ca-certificates curl gnupg
rm -rf ~/.docker
sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd
sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras
sudo apt-get remove docker-desktop
sudo apt-get remove docker-desktop
rm -r $HOME/.docker/desktop
sudo rm /usr/local/bin/com.docker.cli
sudo apt-get update
sudo apt-get install ./docker-desktop-4.27.2-amd64.deb
wget https://desktop.docker.com/linux/main/amd64/docker-desktop-4.27.2-amd64.deb
# Add Docker's official GPG key
sudo apt-get update
sudo apt-get install ca-certificates curl gnupg
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

# Add the repository to apt sources
echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
ls -l /var/run/docker.sock
sudo systemctl start docker
cat docker-compose.yml\

echo "version: '3.8'

services:
  backend:
    build:
      context: ./backend  # Path to your backend directory
    container_name: backend
    ports:
      - "3001:3001"   # Expose the backend API port
    environment:
      - MONGO_URI=mongodb://mongodb:27017/todo_db  # MongoDB connection string
    depends_on:
      - mongodb       # Wait for MongoDB to be ready

  frontend:
    build:
      context: ./frontend  # Path to your frontend directory
    container_name: frontend
    ports:
      - "8080:80"   # Expose the frontend port (Nginx serves it)
    depends_on:
      - backend     # Wait for backend to be ready

  mongodb:
    image: mongo:latest  # Use the MongoDB Docker image
    container_name: mongodb
    ports:
      - "27017:27017"    # Expose MongoDB port
    volumes:
      - mongodb_data:/data/db   # Persist MongoDB data

volumes:
  mongodb_data:
    driver: local   # Use local volume for MongoDB persistence
" > docker-compose.yml
echo "# Use an official Nginx image to serve the static files
FROM nginx:alpine

# Copy the frontend build into the Nginx container
COPY ./build /usr/share/nginx/html

# Expose the frontend port
EXPOSE 80
" > Dockerfile
echo "# Use an official Node.js image
FROM node:16

# Set the working directory
WORKDIR /app

# Copy the package.json and install dependencies
COPY package.json package-lock.json ./
RUN npm install

# Copy the rest of the app code
COPY . .

# Expose the backend API port
EXPOSE 3001

# Command to run the backend
CMD ["npm", "start"]
" > Dockerfile
npm install http-server

npm init -y


npm install

cd frontend
npm install

npm install

rm -rf node_modules
rm package-lock.json

npm start
npm install express mongoose body-parser

cd backend
npm install

docker run --name mongodb -d -p 27017:27017 mongo

docker stop mongodb
docker rm mongodb

npm init -y
npm install express mongoose body-parser cors

docker exec -it todo-nginx-1 bash
curl http://frontend:80

curl http://frontend:80
wget http://frontend:80
docker logs todo-nginx-1
docker logs todo-frontend-1
docker logs todo-backend-1
docker logs todo-mysql-db-1

docker network inspect todo_custom-network
mysql
docker rmi -f 067b11771162 7bb4fa0fd9ca 22f83126fdf2 125402d341fe 429f78413de3 fb27d1a08c04 af9d866861c6 0cc02e9f1835 77c59b638412 10db11fef9ce 9f4b39935f20 63d51fb93589 60c8a892f36f 27a71e19c956 870141b735e7 d2c94e258dcb

docker rmi 42aa71a76273 751829cbc431 074062c61945 62a568747a47 f09e9a6a8690 322260d1509f 6a88d43dd109 b53255abbe03 3d09d86d286d 0c461f30b305 3fed7f7ee2eb 309f9b2b9d87 5d025c4e8969 475a653b758e 73b050ea2f82 c64c98ece5ed

sudo crontab -e

sudo apt-get update
sudo apt-get install certbot python3-certbot-nginx

openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./nginx/ssl/arfprince.dev.key -out ./nginx/ssl/arfprince.dev.crt

docker network inspect todo_custom-network

docker network ls

docker network inspect custom-network

docker-compose logs mysql-db

docker-compose logs todo-mysql-db-1

docker-compose logs todo-mysql-db

docker-compose logs mysql

docker-compose logs frontend
docker-compose logs backend
docker-compose logs nginx

docker-compose logs frontend

docker-compose up --build frontend -d

docker rm  f364d7e9fa77
docker stop f364d7e9fa77
docker-compose down
docker-compose up --build frontend -d

npm install http-server --save

docker-compose ps

docker-compose logs

rm -rf /home/ezy/mine/docker/todo/nginx/default.conf
touch /home/ezy/mine/docker/todo/nginx/default.conf

ls -l /home/ezy/mine/docker/todo/nginx/default.conf

/home/ezy/mine/docker/todo/nginx/default.conf
openssl x509 -in nginx/ssl/cert.pem -text -noout

ls nginx/ssl

mkdir -p nginx/ssl
openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout nginx/ssl/key.pem -out nginx/ssl/cert.pem \
    -subj "/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=arfprince.dev"

cd todo
sudo mkdir -p /data/db
          sudo chown -R $(whoami) /data/db

mongod
sudo mkdir -p /data/db
sudo chown -R $(whoami) /data/db
sudo mkdir -p /data/db
sudo chown -R `id -un` /data/db
mongo
use todo
show collections

sudo systemctl restart mongod

ps aux | grep mongod

sudo apt update
sudo apt install mongodb

sudo systemctl start mongod

node app.
mongo
la
export DOCKER_HOST=unix:///var/run/docker.sock

docker -H unix:///var/run/docker.sock ps

echo $DOCKER_HOST

groups

sudo usermod -aG docker ezy

ls -l /var/run/docker.sock

cd /home/ezy/mine/docker/ToDo/
sudo systemctl status mongod

sudo systemctl stop mongod

mongd
node app.js

sudo apt-get install -y mongodb-org
echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu noble/mongodb-org/8.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list
curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | \
   sudo gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg \
   --dearmor
sudo apt-get install gnupg curl
cat /etc/lsb-release
sudo systemctl enable mongod

sudo systemctl daemon-reload

sudo apt install mongodb-org

wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -

cat /etc/apt/sources.list.d/mongodb-org-6.0.list

sudo systemctl start mongod
sudo systemctl enable mongod

sudo apt update

echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -sc)/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list

sudo apt install mongodb
mongod

satboard generate-certificate --domain arfprince.dev --output ./ssl

satboard generate-certificate --domain shohan.dev --output ./ssl

echo "# Backend Dockerfile
FROM node:14

# Create a non-root user
RUN groupadd -g 1001 appuser && useradd -m -u 1001 -g appuser -s /bin/bash appuser

WORKDIR /app
COPY . .

RUN npm install
RUN chown -R appuser:appuser /app

USER appuser
EXPOSE 3000
CMD ["node", "app.js"]  # Replace with your actual start command" > Dockerfile
docker network creat custom_network
docker docker-compose.yml down
docker docker-compose down
docker exec -it todo-database-1 mysql -u root -p

docker logs todo-database-1 | grep error

docker logs todo-database-1

npm install mysql2

docker exec -it todo-backend-1 bash
apt-get update && apt-get install iputils-ping
ping database

docker exec -it todo-backend-1 curl database:3306

docker exec -it todo-backend-1 ping database

docker logs todo-backend-1

docker-compose up --build

touch nginx.conf
rm nginx.conf
npm install express body-parser mysql2 cors

mkdir backend
cd backend
npm init -y

touch index.html style.css script.js
mkdir frontend
cd frontend

chmod 644 database/init.sql
docker rmi todo-frontend todo-backend todo-nginx
docker-compose down -v
cd ..
rm docker-compose.yml
echo "
CREATE DATABASE IF NOT EXISTS todo_db;
USE todo_db;
CREATE TABLE IF NOT EXISTS todos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    text VARCHAR(255) NOT NULL,
    completed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
" > init.sql
sudo chown -R $USER:$USER .
sudo chmod -R 755 .
touch init.sql
sudo rm -rf init.sql
rm -rf init.sql
rm -rf init.sql/
rm init.sql
mkdir database
rm -rf db
mv db database
cp db database
echo 'version: "3.8"

services:
  frontend:
    build: ./frontend
    container_name: todo-frontend
    ports:
      - "3000:3000"
    networks:
      - frontend-network
    depends_on:
      - backend

  backend:
    build: ./backend
    container_name: todo-backend
    environment:
      - DB_HOST=database
      - DB_USER=root
      - DB_PASSWORD=root_password
      - DB_NAME=todo_db
    networks:
      - backend-network
    depends_on:
      database:
        condition: service_healthy

  database:
    image: mysql:8.0
    container_name: todo-database
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=todo_db
    volumes:
      - todo-db-data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10

  nginx:
    build: ./nginx
    container_name: todo-nginx
    ports:
      - "80:80"
    networks:
      - frontend-network
    depends_on:
      - frontend
      - backend

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge

volumes:
  todo-db-data:' > docker-compose.yml
echo 'CREATE DATABASE IF NOT EXISTS todo_db;
USE todo_db;

CREATE TABLE IF NOT EXISTS todos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    text VARCHAR(255) NOT NULL,
    completed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);' > init.sql
cd db/
cd database

echo 'FROM nginx:alpine
COPY nginx.conf /etc/nginx/nginx.conf
EXPOSE 80' > Dockerfile
echo 'events {
    worker_connections 1024;
}

http {
    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server backend:3001;
    }

    server {
        listen 80;
        
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /api {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}' > nginx.conf
cd ../nginx
echo 'FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3001
CMD ["node", "server.js"]' > Dockerfile
echo '{
  "name": "todo-backend",
  "version": "1.0.0",
  "main": "server.js",
  "dependencies": {
    "express": "^4.18.2",
    "mysql2": "^3.6.1",
    "cors": "^2.8.5"
  }
}' > package.json
cd b
echo '<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Todo App</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>' > index.html
cd ..
mkdir public
cd public
echo 'import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);' > index.js
mkdir src
cd src
echo 'FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "start"]' > Dockerfile
echo '{
  "name": "todo-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "axios": "^1.6.2",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build"
  }
}' > package.json
cd ToDo/
git clone git@github.com:arfprince/TODO_App.git
npm run build:css

npm install
npm run build:css

npx tailwindcss init

npm install tailwindcss

cd /home/ezy/mine/docker/todo/
sudo dpkg -i discord-*.deb

docker-compose down
docker-compose up --build

tree
npx create-react-app .

docker rm 953b2c3f777e
docker stop 953b2c3f777e
npm install react react-dom

cd ls
echo "FROM node:18
WORKDIR /app
COPY . .
RUN npm install
CMD ["npm", "start"]
" > Dockerfile
docker-compose up

npm install express

echo "FROM node:18
WORKDIR /app
COPY . .
RUN npm install express
CMD ["node", "index.js"]
" > Dockerfile
vim index.js
touch index.js
mv App.js /..
n
mv App.js ../
echo "import React, { useEffect, useState } from 'react';

function App() {
    const [data, setData] = useState('');

    useEffect(() => {
        fetch('/api')
            .then((res) => res.json())
            .then((data) => setData(data.message));
    }, []);

    return <h1>{data || 'Loading...'}</h1>;
}

export default App;
" > App.js
echo "services:
  backend:
    build:
      context: ./backend
    ports:
      - "5000:5000"
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - REACT_APP_BACKEND_URL=http://backend:5000
" > docker-compose.yml
cd FrontendAndBackendIntegration/
nautilus .\
cd ..
cd Frontend\ and\ Backend\ Integration/
cd nodejsApi/
node index.js

echo "version: '3.8'
services:
  api:
    build: .
    ports:
      - "3000:3000"
" > docker-compose.yml
echo " FROM node:18
WORKDIR /app
COPY . .
RUN npm install express
CMD ["node", "index.js"]
" > Dockerfile
mkdir nodejsApi
rm mongo-services.yaml
docker volume inspect myvol1
sudo i
docker rmi alpine
docker run --rm -v myvol1:/volume-data mysql ls /volume-data

docker run --rm -v myvol1:/volume-data alpine ls /volume-data

docker run --rm \
    -v myvol1:/volume-data \
    -v ~/docker-backups:/backup \
    mysql \
    tar -czf /backup/myvol1_backup.tar.gz -C /volume-data .

rm myvol1_backup.tar.gz
cat myvol1_backup.tar.gz
cd docker-backups/
ls ~/docker-backups/myvol1_backup.tar.gz

docker rm alpine
docker -rmi aline:latest
docker -rmi aline
docker run --rm \
    -v myvol1:/volume-data \
    -v ~/docker-backups:/backup \
    alpine \
    tar -czf /backup/myvol1_backup.tar.gz -C /volume-data .

cd ezy
cd home
mkdir -p ~/docker-backups

docker exec -it new_mysql_container mysql -u root -proot
docker run -d --name new_mysql_container -v db_data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root mysql

docker stop mysql_container
docker rm mysql_container

docker exec -it mysql_container mysql -u root -proot
docker rm d7d8de091e75
docker stop d7d8de091e75
docker run -d --name mysql_container -v db_data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root mysql
docker volume create db_data
cd Persist_Data/
mkdir Persist_Data
cd docker/
cd ../
mysql -h 172.17.0.2 -u root -p1234
ping 172.17.0.2
docker inspect myvol1
docker logs myvol1
docker logs
sudo  -i
docker inspect d7d8de091e75
docker rm cdf8a117c9dc e6d366d614c1
docker stop cdf8a117c9dc e6d366d614c1
docker run --name myvol1 -d -e MYSQL_ROOT_PASSWORD=1234 -p 3030:3306 -v /home/ezy/mine/docker/sql:/var/lib/mysql mysql

docker run --myvol1 -d -e MYSQL_ROOT_PASSWORD=1234 -p 3030:3306 -v /home/ezy/mine/docker/sql:/var/lib/mysql mysql

docker inspect mysql
docker pull mysql
cd /home/ezy/mine/docker/sql/
docker volume inspect myvol1

docker inspect volume myvol1
docker volume ls
docker context use default
docker inspect 52
cd docker-compose-crash-course/
cd /var/lib/docker/
du -sh
cd /var/lib/docker
ps -ef
sudo apt-get install ./docker-desktop-amd64.deb
ls ./docker-desktop-amd64.deb

systemctl --user enable docker-desktop
docker exec -it projectb-containerB-1 ping projecta-containerA-1
docker exec -it projecta-container-1 ping projecta-containerA-1
docker exec -it projecta-containerA-1 ping projectb-containerB-1
docker exec -it projectb-containerB-1 bash
docker exec -it container1 bash
cd projectB/
docker exec -it projecta-containerA-1 bash
FROM ubuntu:latest
RUN apt-get update && apt-get install -y iputils-ping

cd projectA/
docker rm 92e5e9fb8985 42782922c433
docker stop 92e5e9fb8985 42782922c433
docker stop c33c2787a2b4 5325a2748e20
docker exec -it projectb-containerB-1 ping projecta-containerA-1

docker rm c33c2787a2b4 5325a2748e20
docker exec -it projecta-containerA-1 curl http://projectb-containerB-1

docker exec -it projecta-containerA-1 ping projectb-containerB-1

docker logs projectb-containerB-1

cd mine/docker/insideDualDocker/projectB
docker exec -it projecta-containerA-1 bash
apt-get update
apt-get install iputils-ping

docker logs projectb-containerB-1
cd data
cd projectB
cat message.txt
docker exec -it projecta-containerA-1 bash
apt-get update
apt-get install iputils-ping
docker inspect projecta-containerA-1
docker inspect projectb-containerB-1
docker inspect containerB
docker inspect containerA
docker inpect containerB
docker network inspect network1
MY_VAR=hello \./my_progra
docker rm 93aa70e55718 b32404fde89a
docker stop 93aa70e55718 b32404fde89a
docker exec -it containerA ping containerB
docker exec -it containerB ping containerA
docker restart containerA
docker restart containerB

docker inspect containerA | grep "Networks"
docker inspect containerB | grep "Networks"

docker network inspect network2
docker exec -it containerB ping containerA

docker exec -it containerA sh

docker exec -it containerB sh

docker rename projectb-containerB-1 containerB
docker rename projecta-containerA-1 containerA
docker inspect projecta-containerA-1

docker container ls
docker comtainer ls
docker exec -it containerA ping containerB

cat docker-compose.yml
echo "services:
  containerB:
    image: my_image
    networks:
      - network2
    volumes:
      - ./data:/data

networks:
  network2:
    external: true" > docker-compose.yml
cd insideDualDocker/projectB/
echo "# projectA/docker-compose.yml
services:
  containerA:
    image: your-image-for-containerA
    networks:
      - networkA
    volumes:
      - ./data:/data

networks:
  networkA:
    external: true
" > docker-compose.yml
mkdir projectB
mkdir projectA
mkdir insideDualDocker
cd ..\
cd ..
docker logs container2
docker logs container1
docker stop container1 container2
docker rm container1 container2

cd docker-comepose down
cd insideASingleDocker/
mv myImage insideASingleDocker
docker-compose  down
docker logs container2

docker start container2

docker exec -it container2 ls /data

docker inspect container2

docker exec -it container1 cat /data/message.txt

docker inspect container1
docker inspect container2

gedit docker-compose.yml
cat msg.txt
cd mine/docker/myImage/
vim docker-compose.yml up -d
docker-compose docker-compose.yaml down
docker-compose -f docker-compose.yaml down
docker exec -it container2 sh

docker container prune

docker rm container2

docker stop container2

docker stop bcf835dfee4c 5dbfa77cc372 82b8ac916b62
docoker ps
echo "version: '3'
services:
  container1:
    image: <image_name>
    networks:
      - network1
    volumes:
      - my_shared_volume:/data

  container2:
    image: <image_name>
    networks:
      - network1
    volumes:
      - my_shared_volume:/data

networks:
  network1:
    driver: bridge

volumes:
  my_shared_volume:
" > docker-compose.yml
cd myImage/
cd mine/docker/
cd mine/docker/my
docker run -d --name container1 --network network1 my_image
docker run -d --name container2 --network network1 my_image
docker run -d --name container3 --network network1 my_image
docker run -d --name container4 --network network2 my_image
docker run -d --name container5 --network network2 my_image

docker build -t my_image .

cat Dockerfile
echo "# Use an official base image
FROM nginx:latest

# Expose ports (if required)
EXPOSE 80
" > Dockerfile
echo "# Use an official base image
FROM nginx:latest

# Copy custom configuration (if needed)
COPY ./my_custom_config.conf /etc/nginx/nginx.conf

# Expose ports (if required)
EXPOSE 80
" > Dockerfile
touch Dockerfile

mkdir myImage
mkdir first-docker-image
docker run -d --name container1 --network network1 my_image
docker run -d --name container2 --network network1 my_image
docker run -d --name container3 --network network1 my_image

docker network create network1
docker network create network2

sudo apt install docker.io -y
ip address show
telnet parmanurrahmanfaisal@gmail.com 25

telnet example.com 80

telnet example.com 89

telnet 192.168.1.1 23

telnet 192.168.0.243
curl -H "Host: 3268b058.favourite-memes.pages.dev" http://172.66.44.125
curl -v 3268b058.favourite-memes.pages.dev

ping 3268b058.favourite-memes.pages.dev

dig +short 3268b058.favourite-memes.pages.dev

nslookup 3268b058.favourite-memes.pages.dev

nslookup https://3268b058.favourite-memes.pages.dev/?demo=false&theme=light
curl -H "Host: ezycourse.com" ezycourse.com
curl -H "Host: ezycourse.com" http://[2606:4700:20::681a:f98]
curl -H "Host: ezycourse.com" http://[2606:4700:20::681a:e98]
ping6 2606:4700:20::ac43:4915

curl -H "Host: ezycourse.com" http://[2606:4700:20::ac43:4915]
curl -H "Host: ezycourse.com" http://2606:4700:20::ac43:4915
curl -H "Host: ezycourse.com" http://172.67.73.21
curl -H "Host: ezycourse.com" http://104.26.14.152
curl -H "Host: ezycourse.com" http://104.26.15.152
nslookup ezycourse.com
curl -H "Host: google.com" http://172.217.12.196

curl -H "Host: example.com" http://93.184.216.34

mtr -r google.com
mtr google.com -r
mtr google.com
mtr
arp
route -n
docker stop c6267510a663
nslookup www.instagram.com
nslookup www.ezycourse.com
dig www.ezycourse.com
dig https://ezycourse.com
dig https://ezycourse.com/
dig www.google.com
nmap -sV 192.168.0.232

nmap -sV 192.168.0.242

nmap -v 192.168.0.242

nmap -v 192.168.0.232

nmap 192.168.0.232

nmap localhost
nmap
sudo apt install nmap
ss -tunlp
netstat -antp
netstat
traceroute www.chatgpt.com
traceroute https://chatgpt.com
traceroute https://chatgpt.com/
traceroute www.notion.so
traceroute www.apple.com

traceroute www.google.in

sudo apt update
sudo apt install traceroute

tracert www.google.in
sudo ufw
sudo udf
echo "Hello, friend!" | nc 192.168.0.243 12345

nc -l 192.168.0.243 -p 12345

netstat -tuln

netstat -tuln | grep 12345

sudo ufw disable

sudo ufw allow 12345/udp

nc -l 12345
ip a

nc -lu -p 12345

echo "Hello" | nc -u 192.168.0.255 12345
sudo ufw allow 12345/udp
cd /home/ezy
ipconfig
ifconfig

sudo apt update
sudo apt install net-tools

sudo apt install ipconfig
top
curl http://103.120.201.53

http://103.120.201.53

curl -4 icanhazip.com
sudo ufw app list
/home/ezy
httpd
cd /home/ezy/mine/docker/docker-compose-crash-course/
docker compose stop
docker compose start
export MONGO_ADMIN_USER=admin
export MONGO_ADMIN_PASS=1234
docker up -d
ssh -i myKey.pem ubuntu@16.171.153.147

chmod 400 myKey.pem
cd Downloads
pws
cat id.txt
cat it.txt
h
touch id.txt | echo "273354665651" >> id.txt
cd /home/ezy/aws
docker run -d -p 80:8080 --name Hello hello-world:v1
docker images ls
docker pull hello-world
docker login
docker service ls
docker-compose down -v

docker volume inspect
docker volume inspect myvol
docker run --rm -it -v my-app-data:/data busybox ls /data
docker run --rm -it -v mongodb-data:/data busybox ls /data
docker run --rm -it -v my-app-data:/data busybox ls /data
docker run --rm -it -v mongodb-data:/data busybox ls /data

docker run --rm -it -v myvol1:/data busybox sh
docker volume ls

docker run --rm -it -v my-app-data:/data busybox ls /data

docker logs 339923a0dd9a  # Replace with your my-app container ID

docker exec -it 339923a0dd9a sh
docker run --rm -it -v myvol1:/data busybox sh

cd var/lib/docker/
/var/lib/docker/volumes/myvol1/_data
crontab -e
crontab -l
echo $DBUS_SESSION_BUS_ADDRESS

echo $DISPLAY

ls | grep /usr/bin/notify-send | cat /usr/bin/notify-send
ls | grep notify-send | cat notify-send
ls | grep notify-send
cd /usr/bin/
crontab -e

notify-send "hello"
notify-send
cat firstcron.txt
crontab -l | tail -n 1
crontab -l | head -n 1
date
cd home/ezy
cat /etc/crontab

cat /ect/crontab
cat /ect/crontab/
dpkg -l | grep cron

sudo systemctl status cron

cat /ect/corntab/
cat /ect/corntab
crontab -l

docker pull jenkins
docker pull JenKins
docker-compose -f docker-compose.yaml stop
docker volume inspect 00ec8fdb20abce378ae75da1da3bc0da130e056547ad01a0041940568f3ab15b
docker volume create myvol1
docker log
docker logs *
docker logs .
cd docker/first-docker-image/node_modules/
chmod 770 lib/mysql/
ls -ld lib/mysql
cd lib/mysql
cd lib/mysql/
cd var
docker push arfprince786/my-app:1.1
docker build -t arfprince786/my-app:1.1 .
docker push arfprince786/my-app:1.1 .
docker-compose -f docker-compose.yaml up -d
docker rm 545e1d7b8d9d
docker push arfprince786/my-app:1.0
docker build -t arfprince786/my-app:1.0 .
cd mine/docker/first-docker-image/
dpcker ps
docker-compose -f docker-compose.yaml start
./my_program
export MY_VAR=hello
MY_VAR=hello \./my_program
MY_VAR=hello
docker-compose -f mongo-services.yaml down
docker-compose -f mongo-services.yaml up -d
ps
docker-compose --project-name docker -f mongo-services.yaml up -d
docker-compose --project-name docker -f mongo-services.yaml down
docker-compose -f mongo-services.yaml stop
git clone git@gitlab.com:twn-youtube/docker-compose-crash-course.git

ssh -T git@gitlab.com

cat ~/.ssh/id_rsa.pub

ssh-keygen -t rsa -b 4096 -C "parmanurrahmanfaisal@gmail.com"

ls ~/.ssh/id_rsa.pub

git clone git@gitlab.com:twn-youtube/docker-compose-crash-course.git
docker-compose -f mongo-services.yaml start
docker-compose -f mongo-services.yaml stop -d
docker-compose -f mongo-services.yaml up
docker rm $(docker ps -aq)
docker rmi $(docker images -q)

docker rm 64b60c67deae 5167d8e5bbc0 8c32f5fa5e3e 99e5c525b921 64a08b7ea8c4 c98aea7f9b31 972dbfd0acf5 f3553828e29a 6dd34a7166f4 c2b18c847843 4199df48d319 2ff299f471db d9caeefc4ab3 eaec3fc5b3bc 07545d96d89f

docker rm 64b60c67deae
5167d8e5bbc0
8c32f5fa5e3e
99e5c525b921
64a08b7ea8c4
c98aea7f9b31
972dbfd0acf5
f3553828e29a
6dd34a7166f4
c2b18c847843
4199df48d319
2ff299f471db
d9caeefc4ab3
eaec3fc5b3bc
07545d96d89f

docker-compose -f mongo-services.yaml up down
cat mongo-services.yaml
vim mongo-services.yaml
docker rm 699033b67cec 7ea054e2de6e
docker stop 699033b67cec 7ea054e2de6e
bat --version
docker network
docker-network ls
docker network rm mongo-network
docker rm 0ee401e3e45d 2e23f1aa8478
docker stop 0ee401e3e45d
docker stop 2e23f1aa8478
touch mongo-services.yaml
cd  ..
sudo apt autoremove
sudo dpkg -i discord-0.0.74.deb
sudo apt-get install -f

sudo apt install discord-0.0.74.deb
sudo atp install discord-0.0.74.deb
docker logs 2e23f1aa8478
docker run -d \
              -p 8081:8081 \
              -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \
              -e ME_CONFIG_MONGODB_ADMINPASSWORD=1234 \
-e ME_CONFIG_MONGODB_SERVER=mongodb \
              --network mongo-network \
              --name mongo-express \
              mongo-express

docker network create mongo-network
docker stop 64b60c67deae
docker stop node-app
docker stop node-app:1.0
docker stop docker node-app:1.0
docker stop docker node-app
docker run -d -p 6300:3000 node-app:1.0

docker build -t node-app:1.0 .

vim Dockerfile
ls Dockerfile

cd home/ezy/mine/docker/
cd home/ezy/mine/docker/first-docker-image/Dockerfile/
cd home/ezy/mine/docker/first-docker-image/Dockerfile
find . -name Dockerfile

docker run -d -p 6300:3000 node-app

docker rmi -f node-app:1.0

docker rmi node-app:1.0

docker rm 5ea3a095845e
docker rm c6003c7f083b

docker stop c6003c7f083b

docker inspect node-app:1.0

docker inspect hello-world
docker inspect node-app
docker stop c6003c7f083b
docker inspect c6003c7f083b
docker logs c6003c7f083b
docker logs node-app
docker logs node-app:1.0
docper ps
node -v
npm -v

cd first-docker-image/
mv first-docker-image/ docker/
mkdir docker
curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
sudo apt install -y nodejs

sudo install node
sudo docker ps
docker stop my-docker
docker run --name my-docker -d -p 90:80 nginx
docker stop 8c32f5fa5e3e
docker start 8c32f5fa5e3e
docker run -d -p 80:80 nginx
docker stop 99e5c525b921
docker stop 64a08b7ea8c4
docker run -d -p 9000:80 nginx
docker run -d -p 80:9000 nginx
sudo kill 2544
sudo kill 2543
sudo kill 2542
docker run -d -p 80:3333 nginx
docker stop 6dd34a7166f4
docker logs hello-world
docker logs hello-worlsd
docker run -d hello-world
docker logs 6dd34a7166f4
sudo docker logs
sudo docker log
docker run -d nginx
docker run nginx
sudo docker ps -a
sudo docker stop 4199df48d319
sudo docker run -d nginx
sudo docker run nginx
sudo docker images
sudo docker pull nginx
sudo docker pull inginx:1.23
sudo docker pull inginx
sudo \docker pull inginx
docker pull inginx
sudo docker run hello-world
docker run hello-world
docker-compose images
sudo docker-compose images
docker-compose --version
groups $USER

sudo systemctl restart docker

sudo usermod -aG docker $ezy

groups $ezy

git commit -m "bla"
git a .
git branch -a
cd myPrivateRepo/
git clone git@github.com:arfprince/myPrivateRepo.git
cd gitL
sudo systemctl status apache2

sudo systemctl start apache2

sudo systemctl start httpd

sudo apt install httpd
locate me.txt
cd home/ezy/
locate minte.txt
sudo search mine
ls home/ezy/
sudo apt install htop
sudo apt remove htop
sudo apt update
ls -ld /opt/a.txt
echo " me" >> /opt/a.txt
vim /etc/group
sudo chown :devops /opt/a.txt
sudo groupadd devops
su -i
sudo -
su -
cat /ect/group
sudo groupadd singles
whoami
cd '008 Users and Groups.mp4'
cd '04 - Linux'
cd 'devOps course'
vlc '007 Redirections.mp4'
cd mine/gitL/
omf theme agnoster

fisher install oh-my-fish/theme-bobthefish

curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher

omf install agnoster

curl -L https://get.oh-my.fish | fish

cd  /
sudo cat /var/lib/docker/image/overlay2/repositories.json | jq .


sudo cat /var/lib/docker/image/overlay2/repositories.json


cat /var/lib/docker/image/overlay2/repositories.json


sudo ls -l /var/lib/docker/image/overlay2/imagedb

sudo ls -l /var/lib/docker/image/overlay2

sudo ls -l /var/lib/docker/image

sudo ls -l /var/lib/docker

sudo ls -l /var/lib/docker/overlay2

cd lib
/var/lib/docker
sudo docker image inspect ubuntu

sudo docker image inspect hello-world

docker image inspect hello-world

sudo docker images

docker images

sudo docker run -it ubuntu bash

docker run -it ubuntu bash

sudo apt install jq

sudo chmod +x /usr/local/bin/docker-compose
sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo docker --version
sudo apt install docker-ce docker-ce-cli containerd.io
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
sudo apt install apt-transport-https ca-certificates curl software-properties-common

rm -rf linuxbrew/
rmdir linuxbrew
rmdir linuxbrew/
rm linuxbrew/
sudo deluser --remove-home linuxbrew
cd linuxbrew/
sudo deluser --remove-home arfprince

groups
cd arfprince/
sudo adduser arfprince
cat /etc/passwd
sudo ufw status numbered
sudo ufw enable

sudo systemctl status firewalld

sudo apt autoremove -y
sudo apt clean

sudo apt remove --purge firewalld -y

sudo systemctl disable firewalld

sudo systemctl stop firewalld

sudo systemctl enable firewalld

sudo systemctl start firewalld

sudo apt install firewalld -y

sudo ufw status numbered

sudo ufw delete 9
sudo ufw delete 11
sudo ufw delete 5
sudo ufw delete 5 6 11
sudo ufw delete rule 5
sudo ufw delete rule 5 6 11
sudo ufw status numberd

sudo ufw status verbose

ssh user@192.168.1.1
ssh -i  MyEC2Key.pem ubuntu@13.51.197.150

chmod 400 MyEC2Key.pem

sudo systemctl restart ufw

sudo sh -c 'iptables-save > /etc/iptables/rules.v4'

sudo iptables-save > /etc/iptables/rules.v4

sudo mkdir -p /etc/iptables

sudo tail -f /var/log/ufw.log

sudo iptables -A INPUT -p tcp --dport 5500 -j REJECT

sudo systemctl status ufw

sudo ss -tuln | grep 5500

sudo ufw reload

sudo ufw deny 5500

sudo ufw deny from 127.0.0.1 to any port 5500
sudo ufw deny from 127.0.0.1

sudo ufw deny from 127.0.0.1:5500/index.html
sudo ufw deny from 127.0.0.1:5500
cd Tic-Toc-Toe/
git clone git@github.com:arfprince/Tic-Toc-Toe.git
pwsd
cd /mine/gitL
cd /mine/gitL/
cd /mine/gitL/ clone git@github.com:arfprince/Tic-Toc-Toe.git
cd /mine/gitL clone git@github.com:arfprince/Tic-Toc-Toe.git
sudo ufw allow ftp
sudo ufw status verbose
sudo systemctl status ufw
ssh dev@151.236.216.203
vim /etc/default/ufw
ufw
sudo ufw allow https
sudo ufw allow http
sudo ufw allow ssh
sudo ufw allow ssh http https
sudo apt update
sudo apt install ufw

locate -i me.txt

locate -v
sudo apt install locate
ls | wc -l < me.txt
ls | wc -l < mine
wc -l < me.txt
wc -l me.txt
find / -name "*.tmp" > /dev/null

cat me.txt
la -r
mine  /dev/null/
mine | df -h /dev/null/
mine | df -h /dev/null
mine | df -h
mine df -h
df -h
df -
df
uptime >> me.txt
uptime > me.txt
cd home/ezy/mine/
cut -d : -f3 /home/ezy/mine/me.txt
cut -d : -f1 /home/ezy/mine/me.txt
cat /home/ezy/mine/me.txt
vim /home/ezy/mine/me.txt
cut -d ; -f1 /home/ezy/mine/me.txt
cut -d; -f1 /home/ezy/mine/me.txt
sed s/prince/Prince/g /home/ezy/mine/me.txt
cat /home/ezy/mine/ me.txt
cd /home/exy/mine/
cat /home/exy/mine/ me.txt
cat /home/exy/mine/me.txt/
cat /home/exy/mine/me.txt
vim /home/exy/mine/me.txt
cut -d : -f3 /etc/passwd
cut -d : -f2 /etc/passwd
cut -d : -f1 /etc/passwd
rm tc*.js
bash -c 'touch tc{1..4}.js'
cd tc{1..4}.js
touch tc{1..4}.js
free -m
uptime
source ~/.bashrc
dmesg

sudo apt update
sudo apt install --reinstall virtualbox virtualbox-dkms

lsmod | grep vbox

sudo dmesg | grep -i vbox

dmesg | grep -i vbox

sudo apt install virtualbox

sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A2F683C52980AECF

sudo apt install virtualbox-6.1

deb https://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib

ls /etc/apt/sources.list.d/

sudo apt-key list

curl -fsSL https://www.virtualbox.org/download/oracle_vbox.asc | sudo tee /etc/apt/trusted.gpg.d/virtualbox.asc

cat /etc/apt/sources.list.d/virtualbox.list

virtualbox --help

sudo apt update
sudo apt install virtualbox-6.1

wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -

sudo sh -c 'echo "deb https://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib" > /etc/apt/sources.list.d/virtualbox.list'

wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo tee /etc/apt/trusted.gpg.d/oracle.asc

sudo apt update
sudo apt upgrade -y

sudo rm -rf /opt/idea-ultimate

sudo apt autoremove

sudo snap remove intellij-idea-ultimate

intellij-idea-ce --version

intellij-idea-community --version

mvn -v

sudo ./aws/install

unzip awscliv2.zip

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"

sudo apt update
sudo apt install awscli

awscli
git --version

java -version

sudo apt update
sudo apt install openjdk-11-jdk

sudo apt install git
vagrant status

sudo apt install vagrant-manager
sudo install vagrant-manager
vagrant-manager
vagrant --version

sudo apt update
sudo apt install vagrant

echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main" | sudo tee /etc/apt/sources.list.d/hashicorp.list > /dev/null

sudo nano /etc/apt/sources.list.d/hashicorp.list

sudo apt-add-repository "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main"

lsb_release -a

sudo apt-add-repository "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main"

curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg

sudo apt install -y software-properties-common curl

sudo rm /etc/apt/sources.list.d/hashicorp.list

sudo apt install vagrant

sudo apt-add-repository "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt update

sudo apt update
sudo apt install -y software-properties-common curl
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg

sudo add-apt-repository --remove ppa:avsm/ppa

sudo apt install -y curl
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
sudo apt update

sudo apt update
sudo apt install -y software-properties-common

subl

intellij-idea-community

sudo snap install intellij-idea-community --classic

intellij-idea-ultimate

sudo apt install sublime-text

wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
sudo add-apt-repository "deb https://download.sublimetext.com/ apt/stable/"

sudo snap install intellij-idea-ultimate --classic

mvn -version

sudo apt install maven

sudo install maven
brew --version
help
bash

nano ~/.profile
nano ~/.bash_profile

nano ~/.bashrc

ps aux | grep bacula

sudo fc-cache -f -v

sudo cat /etc/fonts/fonts.conf

sudo apt install --reinstall fontconfig

free -h

sudo rm -rf /etc/bacula /var/log/bacula /var/lib/bacula

/etc/bacula/
sudo systemctl list-units --type=service | grep bacula

dpkg -l | grep bacula

sudo apt purge bacula-console

sudo make uninstall

sudo apt remove bacula-console

sudo bat 2>/dev/null

sudo XDG_RUNTIME_DIR=/run/user/$(id -u) bat

sudo bat

sudo usermod -aG bacula ezy

ls -l /etc/bacula/bat.conf
sudo apt remove bat
sudo apt rm bat
git checkout ,
cat new.js
echo "how are you?" > new.js
rm t{1..4}.txt
touch t{1..4}.txt
t{1..4}.txt
sudo apt-get autoremove

chsh -s /bin/bash

sudo sed -i '/zsh/d' /etc/shells

rm -rf ~/.oh-my-zsh

rm -rf ~/.zshrc ~/.zsh_history ~/.zsh_sessions ~/.zcompdump

sudo pacman -Rns zsh

sudo dnf remove zsh

sudo apt-get remove --purge zsh

ls -lh
ls -al
batcat interactiveshell.sh
batcat hellome.sh
cd bashCmnd/
cd minr
cd git/oh-my-posh/
cd /git/oh-my-posh/
git checkout main
git checkout master
git clone https://github.com/JanDeDobbeleer/oh-my-posh.git
cd oh-my-posh

git commit -m "edited in new.js file"
git branch -
mv ~/.bash_autosuggestions ~/.bash_autosuggestions_backup
git clone git@github.com:infokiller/bash-autosuggestions.git ~/.bash_autosuggestions
git clone https://github.com/infokiller/bash-autosuggestions ~/.bash_autosuggestions
rm -rf ~/.bash_autosuggestions
source ~/.git-prompt.sh
echo 'source ~/.git-prompt.sh' >> ~/.bashrc
curl -o ~/.git-prompt.sh https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh
find /usr -name "git-prompt.sh" 2>/dev/null
git clone git@github.com:marlonrichert/zsh-autosuggestions.git ~/.bash_autosuggestions
git reset ef2ba25
git revert HEAD~1
git revert HEAD --no-edit
git add new.js
gedit new.js
git commit -m "new js added"
touch new.js
git log
git commit -m "nm"
touch me.log
rm me.log
git commit -m "n"
gedit .gitignore
cat .gitignore
touch a.txt
git commit -m "ck"
mv fork /home/ezy/mine/
git push origin
git commit -m "new"
git commmit -m "new"
git psuh origin
git commit -am "all"
git config --global user.name arfprince
git config --global user.email parmanurrahmanfaisal@gmail.com
git config --global parmanurrahmanfaisal@gmail.com
git remote -v
git remote add origin git@github.com:arfprince/w3schools-test.github.io.git
git remote rename origin upstream
cd w3schools-test.github.io
cd git@github.com:arfprince/w3schools-test.github.io.git
git clone git@github.com:arfprince/w3schools-test.github.io.git
rm -rf w3schools-test.github.io
git commit -am "new"
git remote add origin https://github.com/arfprince/w3schools-test.github.io.git
git clone https://github.com/w3schools-test/w3schools-test.github.io.git
cd fork
rm w3schools-test.github.io
git clone https://github.com/w3schools-test/w3schools-test.github.io.git~
ls fork
mkdir fork
git branch -d mine min
git branch min
